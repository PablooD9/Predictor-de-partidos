/**
 * 
 */
package linkedlist;

import sesion08.collection.List;

/**
 * @author UO251065
 *
 */
public class LinkedList<T> implements List<T> {
	
	private int numberOfElements;
	private Node head;
	
	public LinkedList (){
		this.numberOfElements = 0;
		this.head = null;
	}

	/**
	 * Añade al final de la lista el elemento especificado 
	 * @param value Elemento que se añade a la lista
	 */
	@Override
	public void add(Object value) {
		if(value==null){
			throw new RuntimeException("Parametro incorrecto");
		}
		if (isEmpty()){
			head = new Node(value,null);
			this.numberOfElements++;
		}else{
			Node lastNode = getNode(size()-1);
			lastNode.next = new Node(value,null);
			this.numberOfElements++;
		}
		
		
	}

	/**
	 * Elimina el elemento de la colección que coincida con el parámetro 
	 * Devuelve el elemento que fue eliminado de la colección 
	 * @param El elemento que se quiere borrar
	 * @return El elemento de la collección. Null si no se encuentra en la colección
	 */
	@Override
	public Object remove(Object value) {
		int index=-1;
		if(value==null){
			throw new RuntimeException("Parametro incorrecto");
		}
		
		if(isEmpty())
			return null;
		
		for(int i=0;i < this.size();i++){
			if(this.get(i).equals(value)){
				index=i;
			}
		}
		if(index != -1){
			Node nodeToRemove = getNode(index);
			getNode(index-1).next = nodeToRemove.next;
			this.numberOfElements--;
			return nodeToRemove.value;
		}
		return null;
	}

	/**
	 * Devuelve el número de elementos que hay en la colección
	 * @return El número de elementos de la colección
	 */
	@Override
	public int size() {
		return this.numberOfElements;
	}


	/**
	 *  Indica si la colección contiene o no elementos
	 * @return Devuelve <tt>true</tt> si la colección no contiene elementos <tt>false</tt> en caso contrario
	 */
	@Override
	public boolean isEmpty() {
		return (size() == 0);
	}
	
	/**
	 * Devuelve el nodo localizado en la posicion indicada por el parametro index
	 * @param int index posicion que quiero localizar
	 * @return Node nodo localizado
	 */
	private Node getNode(int index){
		if(index<0 || index>this.numberOfElements){
			throw new RuntimeException("Parametro incorrecto");
		}
		if (index < size() && index >= 0){
			Node aux= head;
			for (int i=0; i < index; i++)
				aux= aux.next;
			return aux;
		}
		else
			return null;
	}

	/**
	 * Inserta el elemento en la posición indicada en la lista.
	 * Desplaza el elemento actualmente en esa posición (si existe) y los elementos posteriores
     * a la derecha (añade uno a sus índices). 
	 * @param index Posicion donde se desea insertar el elemento
	 * @param value Elemento que se inserta 
	 */
	@Override
	public void add(int index, Object value) {
		if(value==null || index<0 || index>this.numberOfElements){
			throw new RuntimeException("Parametro incorrecto");
		}
		if (isEmpty()){
			head = new Node(value,null);
			this.numberOfElements++;
		}else{
			Node antNode = getNode(index);
			Node newNode = new Node(value,null);
			if(getNode(index+1)!= null){
				antNode.next = getNode(index+1);
			}
			else{
				antNode.next = null;
			}
			if(index==0){
				head = new Node(value,head);
				this.numberOfElements++;
			}
			else{
				getNode(index-1).next = newNode;
				newNode.next = antNode;
				this.numberOfElements++;
			}
		}
	}

	/**
	 * Elimina el elemento que se encuentra en la posición indicada de la lista
	 * Desplaza los elementos posteriores a la izquierda (resta uno a sus índices). 
	 * Returns el elemento que fue eliminado de la lista. 
	 * @param index índice del elemento que se desea eliminar
	 * @return El elemento que se encontraba previamente en la posición indicada
	 */
	@Override
	public Object remove(int index) {
		if(index<0 || index>this.numberOfElements){
			throw new RuntimeException("Parametro incorrecto");
		}
		else if(isEmpty())
			return null;
		else if(index==0){
			Node nodeToRemove = getNode(index);
			if (numberOfElements > 1)
				head = this.getNode(1);
			else
				head = null;
			this.numberOfElements--;
			return nodeToRemove.value;
		}
		else{	
			Node nodeToRemove = getNode(index);
			getNode(index-1).next = nodeToRemove.next;
			this.numberOfElements--;
			return nodeToRemove.value;
		}
	}

	/**
	 * Devuelve el índice de la primera aparición del elemento en la lista, 
	 * o -1 si la lista no contiene el elemento. 
	 * @param object Elemento a buscar
	 * @return El índice de la primara aparición del elemento en la lista, o -1 si la lista no contiene el elemento
	 */
	@Override
	public int indexOf(Object object) {
		if(object==null){
			throw new RuntimeException("Parametro incorrecto");
		}
		if(this.size()!=0){
			for(int i=0;i < this.size();i++){
				if(this.get(i).equals(object))
					return i;
			}
		}
		return -1;
	}

	/**
	 * Devuelve el elemento que se encuentra en la posición indicada de la lista. 
	 * @param index Índice del elemento a recuperar
	 * @return El elemento que se encuentra en la posición indicada de la lista  
	 */
	@Override
	public Object get(int index) {
		if(index<0 || index>this.numberOfElements){
			throw new RuntimeException("Parametro incorrecto");
		}
		else if(this.isEmpty()){
			return null;
		}
		return getNode(index).value;
	}

	/**
	 * Reemplaza el elemento de la posición indicada en la lista con el elemento especificado
	 * @param index Índice del elemento a reemplazar
	 * @param value Elemento a almacenar en la posición indicada
	 * @return El elemento que se encontraba previamente en la posición indicada
	 */
	@Override
	public Object set(int index, Object value) {
		if(value==null || index<0 || index>this.numberOfElements){
			throw new RuntimeException("Parametro incorrecto");
		}
		Object objeto = get(index);
		getNode(index).value=value;
		return objeto;
	}

	/**
	 * Metodo toString
	 */
	@Override
	public String toString(){
		String cadena="";
		for(int i=0;i < this.size();i++){
			if(i==0){
				cadena=cadena+this.get(i).toString();
			}else{
			cadena=cadena+", "+this.get(i).toString();
			}
		}
		return "["+cadena+"]";
	}
}
