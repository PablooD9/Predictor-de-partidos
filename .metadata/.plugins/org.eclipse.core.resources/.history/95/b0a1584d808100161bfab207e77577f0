/**
 * 
 */
package equipos_y_jugadores;

import exceptions.IllegalParameters;

/**
 * @author Antonio Payá y Guillermo Díaz
 * @version 0.1
 * 
 * Clase Equipo , que contiene las propiedades como partidos ganados
 * perdidos, goles ... etc , que permite ayudar en el cálculo.
 *
 */
public class Equipo {
	private String name; //nombre del equipo
	private double golesFavor; //goles a favor del equipo esta temporada
	private double golesFavorCasa; //goles a favor del equipo esta temporada en casa
	private double golesFavorAnterior; // goles a favor en la anterior liga
	
	private double golesContra; //goles en contra del equipo esta temporada
	private double golesContraCasa; // goles en contra en casa del equipo esta temporada
	private double golesContraAnterior; // goles en contra en la anterior liga
	
	private double partidosGanados; // partidos ganados del equipo esta temporada
	private double partidosGanadosCasa; //partidos ganados en casa del equipo esta temporada
	private double partidosGanadosFuera; //partidos ganados fuera del equipo esta temporada
	
	private double partidosPerdidos; //partidos perdidos del equipo esta temporada
	private double partidosPerdidosCasa; //partidos perdidos del equipo esta temporada
	private double partidosPerdidosFuera; //partidos perdidos del equipo esta temporada
	
	private double partidosEmpatados; //partidos empatados del equipo
	private double partidosEmpatadosCasa; //partidos empatados del equipo en casa
	private double partidosEmpatadosFuera; //partidos empatados del equipo fuera
	
	private double partidosJugados; //numero de partidos jugados
	private double puesto; // puesto en la liga
	private double puestoAnterior; // puesto en la anterior liga
	private double nivelEquipo; // valor del 1 al 5 que valora el nivel del equipo
	
	private IllegalParameters exception1;
	
	
	/**
	 * Constructor que crea la clase solo con el nombre y nivel del equipo
	 * @param name, Nombre del equipo , de tipo String
	 */
	public Equipo(String name,double nivelEquipo) {
		
		exception1 = new IllegalParameters();
		setName(name);
		setNivelEquipo(nivelEquipo);
		
	}
	

	/**
	 * Constructor principal de la clase, con los atributos mas basicos
	 */
	public Equipo(String name,double golesFavor,double golesContra,double partidosGanados,double partidosPerdidos,double partidosEmpatados,
			double puesto,double nivelEquipo) {
		
		exception1 = new IllegalParameters();
		setName(name);
		setGolesFavor(golesFavor);
		setGolesContra(golesContra);
		setPartidosPerdidos(partidosPerdidos);
		setPartidosEmpatados(partidosEmpatados);
		setPuesto(puesto);
		setNivelEquipo(nivelEquipo);
	}
	
	

	
	//Setters
	
	/**
	 * @param name , Nombre del equipo
	 */
	private void setName(String name) {
		this.name = name;
	}

	/**
	 * @param golesFavor the golesFavor to set
	 */
	public void setGolesFavor(double golesFavor) {
		exception1.mayor0(golesFavor);
		this.golesFavor = golesFavor;
	}



	/**
	 * @param golesFavorCasa the golesFavorCasa to set
	 */
	public void setGolesFavorCasa(double golesFavorCasa) {
		exception1.mayor0(golesFavorCasa);
		this.golesFavorCasa = golesFavorCasa;
	}



	/**
	 * @param golesFavorAnterior the golesFavorAnterior to set
	 */
	public void setGolesFavorAnterior(double golesFavorAnterior) {
		exception1.mayor0(golesFavorAnterior);
		this.golesFavorAnterior = golesFavorAnterior;
	}



	/**
	 * @param golesContra2 the golesContra to set
	 */
	public void setGolesContra(double golesContra2) {
		exception1.mayor0(golesContra2);
		this.golesContra = golesContra2;
	}



	/**
	 * @param golesContraCasa the golesContraCasa to set
	 */
	public void setGolesContraCasa(double golesContraCasa) {
		exception1.mayor0(golesContraCasa);
		this.golesContraCasa = golesContraCasa;
	}



	/**
	 * @param golesContraAnterior the golesContraAnterior to set
	 */
	public void setGolesContraAnterior(double golesContraAnterior) {
		exception1.mayor0(golesContraAnterior);
		this.golesContraAnterior = golesContraAnterior;
	}



	/**
	 * @param partidosGanados the partidosGanados to set
	 */
	public void setPartidosGanados(double partidosGanados) {
		exception1.mayor0(partidosGanados);
		this.partidosGanados = partidosGanados;
	}



	/**
	 * @param partidosGanadosCasa the partidosGanadosCasa to set
	 */
	public void setPartidosGanadosCasa(double partidosGanadosCasa) {
		exception1.mayor0(partidosGanadosCasa);
		this.partidosGanadosCasa = partidosGanadosCasa;
	}



	/**
	 * @param partidosGanadosFuera the partidosGanadosFuera to set
	 */
	public void setPartidosGanadosFuera(double partidosGanadosFuera) {
		exception1.mayor0(partidosGanadosFuera);
		this.partidosGanadosFuera = partidosGanadosFuera;
	}



	/**
	 * @param partidosPerdidos2 the partidosPerdidos to set
	 */
	public void setPartidosPerdidos(double partidosPerdidos2) {
		exception1.mayor0(partidosPerdidos2);
		this.partidosPerdidos = partidosPerdidos2;
	}



	/**
	 * @param partidosPerdidosCasa the partidosPerdidosCasa to set
	 */
	public void setPartidosPerdidosCasa(double partidosPerdidosCasa) {
		exception1.mayor0(partidosPerdidosCasa);
		this.partidosPerdidosCasa = partidosPerdidosCasa;
	}



	/**
	 * @param partidosPerdidosFuera the partidosPerdidosFuera to set
	 */
	public void setPartidosPerdidosFuera(double partidosPerdidosFuera) {
		exception1.mayor0(partidosPerdidosFuera);
		this.partidosPerdidosFuera = partidosPerdidosFuera;
	}



	/**
	 * @param partidosEmpatados2 the partidosEmpatados to set
	 */
	public void setPartidosEmpatados(double partidosEmpatados2) {
		exception1.mayor0(partidosEmpatados2);
		this.partidosEmpatados = partidosEmpatados2;
	}



	/**
	 * @param partidosEmpatadosCasa the partidosEmpatadosCasa to set
	 */
	public void setPartidosEmpatadosCasa(double partidosEmpatadosCasa) {
		exception1.mayor0(partidosEmpatadosCasa);
		this.partidosEmpatadosCasa = partidosEmpatadosCasa;
	}



	/**
	 * @param partidosEmpatadosFuera the partidosEmpatadosFuera to set
	 */
	public void setPartidosEmpatadosFuera(double partidosEmpatadosFuera) {
		exception1.mayor0(partidosEmpatadosFuera);
		this.partidosEmpatadosFuera = partidosEmpatadosFuera;
	}



	/**
	 * @param puesto2 the puesto to set
	 */
	public void setPuesto(double puesto2) {
		exception1.mayor0(puesto2);
		this.puesto = puesto2;
	}



	/**
	 * @param puestoAnterior the puestoAnterior to set
	 */
	public void setPuestoAnterior(double puestoAnterior) {
		exception1.mayor0(puestoAnterior);
		this.puestoAnterior = puestoAnterior;
	}



	/**
	 * @param nivelEquipo2 the nivelEquipo to set
	 */
	private void setNivelEquipo(double nivelEquipo2) {
		if(nivelEquipo2 < 1 || nivelEquipo2 > 5)
			throw new RuntimeException("Nivel de equipo mayor que 5 o menor que 1");
		this.nivelEquipo = nivelEquipo2;
	}

	
	//Getters
	

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}
	
	/**
	 * @return the golesFavor
	 */
	public double getGolesFavor() {
		return golesFavor;
	}

	/**
	 * @return the golesFavorCasa
	 */
	public double getGolesFavorCasa() {
		return golesFavorCasa;
	}

	/**
	 * @return the golesFavorAnterior
	 */
	public double getGolesFavorAnterior() {
		return golesFavorAnterior;
	}

	/**
	 * @return the golesContra
	 */
	public double getGolesContra() {
		return golesContra;
	}

	/**
	 * @return the golesContraCasa
	 */
	public double getGolesContraCasa() {
		return golesContraCasa;
	}

	/**
	 * @return the golesContraAnterior
	 */
	public double getGolesContraAnterior() {
		return golesContraAnterior;
	}

	/**
	 * @return the partidosGanados
	 */
	public double getPartidosGanados() {
		return partidosGanados;
	}

	/**
	 * @return the partidosGanadosCasa
	 */
	public double getPartidosGanadosCasa() {
		return partidosGanadosCasa;
	}

	/**
	 * @return the partidosGanadosFuera
	 */
	public double getPartidosGanadosFuera() {
		return partidosGanadosFuera;
	}

	/**
	 * @return the partidosPerdidos
	 */
	public double getPartidosPerdidos() {
		return partidosPerdidos;
	}

	/**
	 * @return the partidosPerdidosCasa
	 */
	public double getPartidosPerdidosCasa() {
		return partidosPerdidosCasa;
	}

	/**
	 * @return the partidosPerdidosFuera
	 */
	public double getPartidosPerdidosFuera() {
		return partidosPerdidosFuera;
	}

	/**
	 * @return the partidosEmpatados
	 */
	public double getPartidosEmpatados() {
		return partidosEmpatados;
	}

	/**
	 * @return the partidosEmpatadosCasa
	 */
	public double getPartidosEmpatadosCasa() {
		return partidosEmpatadosCasa;
	}

	/**
	 * @return the partidosEmpatadosFuera
	 */
	public double getPartidosEmpatadosFuera() {
		return partidosEmpatadosFuera;
	}

	/**
	 * @return the partidosJugados
	 */
	public double getPartidosJugados() {
		this.partidosJugados = this.getPartidosGanados()+this.getPartidosEmpatados()+this.getPartidosPerdidos();
		return partidosJugados;
	}

	/**
	 * @return the puesto
	 */
	public double getPuesto() {
		return puesto;
	}

	/**
	 * @return the puestoAnterior
	 */
	public double getPuestoAnterior() {
		return puestoAnterior;
	}

	/**
	 * @return the nivelEquipo
	 */
	public double getNivelEquipo() {
		return nivelEquipo;
	}
	
	//Otros metodos
	
	/**
	 * Metodo que devuelve un numero que significa lo potente que es el equipo fuera de casa
	 * @return int
	 */
	public double indiceFuera(){
		double indice;
		double partidosJugadosFuera = this.getPartidosEmpatadosFuera()+this.getPartidosGanadosFuera()+this.getPartidosPerdidosFuera();
		double goles =( this.getGolesFavor()-this.getGolesFavorCasa())-(this.getGolesContra()-this.getGolesContraCasa());
		indice = (getPartidosGanadosFuera()-getPartidosPerdidosFuera())/partidosJugadosFuera + (goles/10);
		return indice;
	}
	
	/**
	 * Metodo que devuelve un numero que significa lo potente que es el equipo en casa
	 * @return int
	 */
	public double indiceCasa(){
		double indice;
		double partidosJugadosCasa = this.getPartidosEmpatadosCasa()+this.getPartidosGanadosCasa()+this.getPartidosPerdidosCasa();
		double goles = this.getGolesFavorCasa()-this.getGolesContraCasa();
		indice = (getPartidosGanadosCasa()-getPartidosPerdidosCasa())/partidosJugadosCasa + (goles/10);
		return indice;
	}
	
	/**
	 * Metodo que devuelve un numero que significa la potencia del equipo, (sin tener en cuenta su rival)
	 * @param juegaCasa, de tipo boleano , true si juega en casa
	 * @return
	 */
	public double indiceEquipo(boolean juegaCasa){
		double indice;
		double golesAnterior = (getGolesFavorAnterior()-getGolesContraAnterior())/100;
		if(juegaCasa){
			indice=indiceCasa()-(1/getPuesto())+ golesAnterior + (0.1*getNivelEquipo());
			return indice;
		}
		else{
			indice=indiceFuera()-(1/getPuesto())+ golesAnterior + (0.1*getNivelEquipo());
			return indice;
		}
	}

}
